# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ObjectDetectionInterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io

import cv2
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Screenshot import Screenshot as ss
from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from PIL import Image
import numpy as np


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        super(Ui_MainWindow, self).__init__()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.screen = QtWidgets.QLabel(self.centralwidget)
        self.screen.setGeometry(QtCore.QRect(4, -1, 720, 405))
        self.screen.setText("")
        self.screen.setScaledContents(True)
        self.screen.setObjectName("screen")
        self.Threshold = QtWidgets.QSlider(self.centralwidget)
        self.Threshold.setGeometry(QtCore.QRect(10, 450, 160, 16))
        self.Threshold.setMaximum(10)
        self.Threshold.setOrientation(QtCore.Qt.Horizontal)
        self.Threshold.setObjectName("Threshold")
        self.Start_ObjectDetection = QtWidgets.QPushButton(self.centralwidget)
        self.Start_ObjectDetection.setGeometry(QtCore.QRect(170, 500, 131, 31))
        self.Start_ObjectDetection.setObjectName("Start_ObjectDetection")
        self.Start_ObjectDetection.clicked.connect(self.start_OD)
        self.Stop_ObjectDetection = QtWidgets.QPushButton(self.centralwidget)
        self.Stop_ObjectDetection.setGeometry(QtCore.QRect(340, 500, 131, 31))
        self.Stop_ObjectDetection.setObjectName("Stop_ObjectDetection")
        self.Stop_ObjectDetection.clicked.connect(self.stop_OD)
        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(10, 500, 121, 31))
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.get_object)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Start_ObjectDetection.setText(_translate("MainWindow", "Start"))
        self.Stop_ObjectDetection.setText(_translate("MainWindow", "Stop"))
        self.toolButton.setText(_translate("MainWindow", "Choose file"))


    def start_OD(self):
        self.Worker = Worker()
        self.Worker.start()
        self.Worker.ImageUpdate.connect(self.update_image_slot)


    def stop_OD(self):
        self.Worker.stop()

    def get_object(self):
        Tk().withdraw()
        filename = askopenfilename()
        print(filename)

    def update_image_slot(self, nparray):

        PILimage = Image.fromarray(nparray)
        cvImage = cv2.cvtColor(nparray, cv2.COLOR_RGB2BGR)

        ConvertToQtFormat = QImage(cvImage.data, cvImage.shape[1], cvImage.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
        self.screen.setPixmap(QPixmap.fromImage(Pic))

    def startStopButton(self):





class Worker(QThread):

    ImageUpdate = pyqtSignal(np.ndarray)

    def run(self):
        self.ThreadActive = True

        while self.ThreadActive:
            self.ImageUpdate.emit(ss.capture_screen())


    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
