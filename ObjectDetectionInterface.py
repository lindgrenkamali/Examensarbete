# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ObjectDetectionInterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io

import cv2
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PhotoManager import PhotoManager as pm
from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import numpy as np
from ObjectDetection import ObjectDetection
from win32api import GetSystemMetrics
from ScreenManager import ScreenManager

class CornerWindow(QWidget):
    def __init__(self, x, y, sm, width, height):
        super().__init__()
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        self.run_objectdetection = True
        self.SM = sm
        self.x = 0
        self.y = 0
        self.setLayout(layout)
        self.Width = width
        self.Height = height
        self.setFixedSize(self.SM.GetSize(320), self.SM.GetSize(180))
        self.move(x, y)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)

        self.Screen = QLabel()
        black = QPixmap(self.SM.GetSize(360), self.SM.GetSize(1440))
        black.fill(Qt.black)
        self.Screen.setPixmap(black)
        layout.addWidget(self.Screen)

    def update_image_slot(self, np):
        cvImage = cv2.cvtColor(np, cv2.COLOR_BGR2RGB)
        ConvertToQtFormat = QImage(cvImage.data, cvImage.shape[1], cvImage.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(self.SM.GetSize(320), self.SM.GetSize(180), Qt.KeepAspectRatio)
        Pic = QPixmap.fromImage(Pic)
        self.Screen.setPixmap(Pic)

    def move_window(self):
        self.move(self.x, self.y)


class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()
        screenwidth = GetSystemMetrics(0)
        screenheight = GetSystemMetrics(1)

        self.SM = ScreenManager(screenwidth, screenheight)
        self.Corner_x = 0
        self.Corner_y = 0
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.Start_Stop = QtWidgets.QPushButton(self.centralwidget)
        self.ToolButton = QtWidgets.QToolButton(self.centralwidget)
        self.MenuBar = QtWidgets.QMenuBar(MainWindow)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.Corner = CornerWindow(self.Corner_x, self.Corner_y, self.SM, 320, 180)
        self.Screen = QtWidgets.QLabel(self.centralwidget)
        self.Threshold = QtWidgets.QSlider(self.centralwidget)
        self.RadioButton_mode_Default = QtWidgets.QRadioButton(self.centralwidget)
        self.RadioButton_mode_FPS = QtWidgets.QRadioButton(self.centralwidget)
        self.ResolutionBox = QtWidgets.QComboBox(self.centralwidget)
        self.PositionBox = QtWidgets.QComboBox(self.centralwidget)
        self.PlainText = QPlainTextEdit(self.centralwidget)
        self.PlainText.setGeometry(QtCore.QRect(self.SM.GetSize(370), self.SM.GetSize(405),
                                                self.SM.GetSize(350), self.SM.GetSize(300)))
        self.PlainText.setReadOnly(True)
        self.Files = []

        self.ResolutionLabel = QtWidgets.QLabel(self.centralwidget)
        self.ThresholdLabel = QtWidgets.QLabel(self.centralwidget)
        self.ModeLabel = QtWidgets.QLabel(self.centralwidget)
        self.FpsLabel = QtWidgets.QLabel(self.centralwidget)
        self.PositionLabel = QtWidgets.QLabel(self.centralwidget)
        self.DefaultLabel = QtWidgets.QLabel(self.centralwidget)
        self.Mode = "Default"

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(self.SM.GetSize(720), self.SM.GetSize(700))

        self.centralwidget.setObjectName("centralwidget")
        self.set_screen()
        self.set_threshold()
        self.set_radiobuttons()
        self.set_positionbox()
        self.set_resolutionbox()

        self.Start_Stop.setGeometry(QtCore.QRect(self.SM.GetSize(170), self.SM.GetSize(650),
                                                 self.SM.GetSize(131), self.SM.GetSize(31)))
        self.Start_Stop.setObjectName("StartStop_ObjectDetection")
        self.Start_Stop.clicked.connect(self.startStopButton)
        self.Start_Stop.setEnabled(False)

        self.ToolButton.setGeometry(QtCore.QRect(self.SM.GetSize(10), self.SM.GetSize(650), self.SM.GetSize(121), self.SM.GetSize(31)))
        self.ToolButton.setObjectName("toolButton")
        self.ToolButton.clicked.connect(self.get_object)
        MainWindow.setCentralWidget(self.centralwidget)

        self.MenuBar.setGeometry(QtCore.QRect(0, 0, self.SM.GetSize(700), self.SM.GetSize(18)))
        self.MenuBar.setObjectName("menubar")
        MainWindow.setMenuBar(self.MenuBar)

        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Start_Stop.setText(_translate("MainWindow", "Start"))
        self.ToolButton.setText(_translate("MainWindow", "Choose file"))
        self.ThresholdLabel.setText(_translate("MainWindow", str(self.Threshold.value() / 100)))
        self.ModeLabel.setText(_translate("MainWindow", "Mode:"))
        self.DefaultLabel.setText(_translate("Main", "Default"))
        self.FpsLabel.setText(_translate("Main", "FPS"))
        self.PositionLabel.setText(_translate("Main", "Position:"))
        self.ResolutionLabel.setText(_translate("Main", "Resolution:"))

    def set_screen(self):
        self.Screen.setGeometry(QtCore.QRect(0, 0, self.SM.GetSize(720), self.SM.GetSize(405)))
        self.Screen.setText("")
        self.Screen.setScaledContents(True)
        self.Screen.setObjectName("screen")
        black = QPixmap(16, 16)
        black.fill(Qt.black)
        self.Black = black
        self.Screen.setPixmap(self.Black)

    def set_threshold(self):
        self.Threshold.setGeometry(QtCore.QRect(self.SM.GetSize(10), self.SM.GetSize(450), self.SM.GetSize(160), self.SM.GetSize(16)))
        self.Threshold.setMinimum(40)
        self.Threshold.setMaximum(100)
        self.Threshold.setOrientation(QtCore.Qt.Horizontal)
        self.Threshold.setObjectName("Threshold")
        self.Threshold.valueChanged.connect(self.update_threshold)

        self.ThresholdLabel.setGeometry(QtCore.QRect(self.SM.GetSize(200), self.SM.GetSize(450),
                                                     self.SM.GetSize(160), self.SM.GetSize(16)))
        self.ThresholdLabel.setObjectName("thresholdLabel")

    def set_radiobuttons(self):

        self.ModeLabel.setGeometry(self.SM.GetSize(10), self.SM.GetSize(500), self.SM.GetSize(50), self.SM.GetSize(16))
        self.ModeLabel.setObjectName("modeLabel")

        self.RadioButton_mode_Default.setGeometry(QtCore.QRect(self.SM.GetSize(70), self.SM.GetSize(500),
                                                               self.SM.GetSize(95), self.SM.GetSize(20)))
        self.RadioButton_mode_Default.setChecked(True)
        self.RadioButton_mode_Default.setObjectName("Default")
        self.RadioButton_mode_Default.clicked.connect(self.update_mode)
        self.Mode = self.RadioButton_mode_Default.objectName()

        self.DefaultLabel.setGeometry(QtCore.QRect(self.SM.GetSize(100), self.SM.GetSize(500),
                                                   self.SM.GetSize(50), self.SM.GetSize(16)))
        self.DefaultLabel.setObjectName("defaultLabel")

        self.RadioButton_mode_FPS.setGeometry(QtCore.QRect(self.SM.GetSize(170), self.SM.GetSize(500),
                                                           self.SM.GetSize(95), self.SM.GetSize(20)))
        self.RadioButton_mode_FPS.setObjectName("FPS")
        self.RadioButton_mode_FPS.clicked.connect(self.update_mode)

        self.FpsLabel.setGeometry(QtCore.QRect(self.SM.GetSize(200), self.SM.GetSize(500),
                                               self.SM.GetSize(160), self.SM.GetSize(16)))
        self.FpsLabel.setObjectName("fpsLabel")

    def get_object(self):
        Tk().withdraw()
        filepath = askopenfilename()
        self.Files.append(pm.path_to_cvimage(filepath))
        self.PlainText.appendPlainText(filepath)
        self.Start_Stop.setEnabled(True)

    def set_resolutionbox(self):

        self.ResolutionLabel.setGeometry(self.SM.GetSize(10), self.SM.GetSize(605),
                             self.SM.GetSize(160), self.SM.GetSize(16))

        self.ResolutionBox.setGeometry(self.SM.GetSize(80), self.SM.GetSize(600),
                                       self.SM.GetSize(160), self.SM.GetSize(32))

        self.ResolutionBox.addItem("320 x 180")
        self.ResolutionBox.addItem("640 x 360")
        self.ResolutionBox.addItem("960 x 540")
        self.ResolutionBox.addItem("1024 x 576")
        self.ResolutionBox.addItem("1280 x 720")
        self.ResolutionBox.activated.connect(self.update_resolution)

    def set_positionbox(self):
        self.PositionLabel.setGeometry(QtCore.QRect(self.SM.GetSize(10), self.SM.GetSize(550),
                                                    self.SM.GetSize(160), self.SM.GetSize(16)))
        self.PositionLabel.setObjectName("positionLabel")

        self.PositionBox.addItem("UpperLeft")
        self.PositionBox.addItem("UpperRight")
        self.PositionBox.addItem("LowerLeft")
        self.PositionBox.addItem("LowerRight")
        self.PositionBox.setGeometry(self.SM.GetSize(80), self.SM.GetSize(545),
                                     self.SM.GetSize(160), self.SM.GetSize(32))
        self.PositionBox.activated.connect(self.set_position)

    def set_position(self, index):
        if index == 0:
            self.Corner.x = 0
            self.Corner.y = 0

        elif index == 1:
            self.Corner.x = 1920 - 320
            self.Corner.y = 0

        elif index == 2:
            self.Corner.x = 0
            self.Corner.y = 1080 - 180

        elif index == 3:
            self.Corner.x = 1920 - 320
            self.Corner.y = 1080 - 180

        self.Corner.move_window()


    def update_image_slot(self, np):

        cvImage = cv2.cvtColor(np, cv2.COLOR_BGR2RGB)
        self.lastMatch = cvImage
        ConvertToQtFormat = QImage(cvImage.data, cvImage.shape[1], cvImage.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(self.SM.GetSize(640), self.SM.GetSize(360), Qt.KeepAspectRatio)
        Pic = QPixmap.fromImage(Pic)
        self.Screen.setPixmap(Pic)

    def black_screen(self):
        self.Screen.setPixmap(self.Black)

    def startStopButton(self):
        if self.Start_Stop.text() == "Start":
            self.Corner.show()
            self.Corner.Worker = Worker(self.Threshold.value(), self.Mode, self.Files)
            self.Corner.Worker.start()
            self.Corner.Worker.ImageUpdate.connect(self.Corner.update_image_slot)
            self.Worker = Worker(self.Threshold.value(), self.Mode, self.Files)
            self.Worker.start()
            self.Worker.ImageUpdate.connect(self.update_image_slot)
            self.Worker.BlackScreen.connect(self.black_screen)
            self.Start_Stop.setText("Stop")

        elif self.Start_Stop.text() == "Stop":
            self.Corner.Worker.stop()
            self.Worker.stop()
            self.Start_Stop.setText("Start")
            self.Corner.close()

    def update_resolution(self):
        width, height = self.ResolutionBox.currentText().split(" x ")
        self.Corner.Width = int(width)
        self.Corner.Height = int(height)

    def update_threshold(self):
        threshold = self.Threshold.value()
        self.ThresholdLabel.setText(str(threshold / 100))

    def update_mode(self):
        if self.RadioButton_mode_Default.isChecked():
            self.Mode = 'Default'

        elif self.RadioButton_mode_FPS.isChecked():
            self.Mode = 'FPS'



class Worker(QThread):

    ImageUpdate = pyqtSignal(np.ndarray)
    BlackScreen = pyqtSignal()
    UpdateThreshold = pyqtSignal()

    def __init__(self, threshold, mode, files):
        super(Worker, self).__init__()
        self.ThreadActive = True
        self.Threshold = threshold
        self.Mode = mode
        self.Files = files

    def run(self):

        while self.ThreadActive:

            qimage = ObjectDetection(self.Threshold, self.Mode).detect_objects(pm.capture_screen(), self.Files)
            self.ImageUpdate.emit(np.array(qimage))

        self.BlackScreen.emit()

    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
