# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ObjectDetectionInterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import io

import cv2
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Screenshot import Screenshot as ss
from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import numpy as np
from ObjectDetection import ObjectDetection


class CornerWindow(QWidget):
    def __init__(self, x, y):
        super().__init__()
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        self.run_objectdetection = True
        self.x = 0
        self.y = 0
        self.setLayout(layout)
        self.setFixedSize(320, 180)
        self.move(x, y)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)

        self.screen = QLabel()
        black = QPixmap(360, 1440)
        black.fill(Qt.black)
        self.screen.setPixmap(black)
        layout.addWidget(self.screen)

    def update_image_slot(self, np):
        cvImage = cv2.cvtColor(np, cv2.COLOR_BGR2RGB)
        ConvertToQtFormat = QImage(cvImage.data, cvImage.shape[1], cvImage.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(320, 180, Qt.KeepAspectRatio)
        Pic = QPixmap.fromImage(Pic)
        self.screen.setPixmap(Pic)

    def move_window(self):
        self.move(self.x, self.y)


class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()
        self.corner_x = 0
        self.corner_y = 0
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.start_stop = QtWidgets.QPushButton(self.centralwidget)
        self.toolbutton = QtWidgets.QToolButton(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.corner = CornerWindow(self.corner_x, self.corner_y)
        self.screen = QtWidgets.QLabel(self.centralwidget)
        self.threshold = QtWidgets.QSlider(self.centralwidget)
        self.radioButton_mode_Default = QtWidgets.QRadioButton(self.centralwidget)
        self.radiobutton_mode_FPS = QtWidgets.QRadioButton(self.centralwidget)
        self.positionBox = QtWidgets.QComboBox(self.centralwidget)
        self.plainText = QPlainTextEdit(self.centralwidget)
        self.plainText.setGeometry(QtCore.QRect(350, 405, 350, 330))
        self.plainText.setReadOnly(True)
        self.files = []

        self.thresholdLabel = QtWidgets.QLabel(self.centralwidget)
        self.modeLabel = QtWidgets.QLabel(self.centralwidget)
        self.fpsLabel = QtWidgets.QLabel(self.centralwidget)
        self.positionLabel = QtWidgets.QLabel(self.centralwidget)
        self.defaultLabel = QtWidgets.QLabel(self.centralwidget)
        self.mode = "Default"

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 700)

        self.centralwidget.setObjectName("centralwidget")

        self.set_screen()
        self.set_threshold()
        self.set_radiobuttons()
        self.set_positionbox()

        self.start_stop.setGeometry(QtCore.QRect(170, 600, 131, 31))
        self.start_stop.setObjectName("StartStop_ObjectDetection")
        self.start_stop.clicked.connect(self.startStopButton)
        self.start_stop.setEnabled(False)

        self.toolbutton.setGeometry(QtCore.QRect(10, 600, 121, 31))
        self.toolbutton.setObjectName("toolButton")
        self.toolbutton.clicked.connect(self.get_object)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar.setGeometry(QtCore.QRect(0, 0, 700, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.start_stop.setText(_translate("MainWindow", "Start"))
        self.toolbutton.setText(_translate("MainWindow", "Choose file"))
        self.thresholdLabel.setText(_translate("MainWindow", str(self.threshold.value() / 100)))
        self.modeLabel.setText(_translate("MainWindow", "Mode:"))
        self.defaultLabel.setText(_translate("Main", "Default"))
        self.fpsLabel.setText(_translate("Main", "FPS"))
        self.positionLabel.setText(_translate("Main", "Position:"))

    def set_screen(self):
        self.screen.setGeometry(QtCore.QRect(4, -1, 720, 405))
        self.screen.setText("")
        self.screen.setScaledContents(True)
        self.screen.setObjectName("screen")
        black = QPixmap(16, 16)
        black.fill(Qt.black)
        self.black = black
        self.screen.setPixmap(self.black)

    def set_threshold(self):
        self.threshold.setGeometry(QtCore.QRect(10, 450, 160, 16))
        self.threshold.setMinimum(40)
        self.threshold.setMaximum(100)
        self.threshold.setOrientation(QtCore.Qt.Horizontal)
        self.threshold.setObjectName("Threshold")
        self.threshold.valueChanged.connect(self.update_threshold)

        self.thresholdLabel.setGeometry(QtCore.QRect(200, 450, 160, 16))
        self.thresholdLabel.setObjectName("thresholdLabel")

    def set_radiobuttons(self):

        self.modeLabel.setGeometry(10, 500, 50, 16)
        self.modeLabel.setObjectName("modeLabel")

        self.radioButton_mode_Default.setGeometry(QtCore.QRect(70, 500, 95, 20))
        self.radioButton_mode_Default.setChecked(True)
        self.radioButton_mode_Default.setObjectName("Default")
        self.radioButton_mode_Default.clicked.connect(self.update_mode)
        self.mode = self.radioButton_mode_Default.objectName()


        self.defaultLabel.setGeometry(QtCore.QRect(100, 500, 50, 16))
        self.defaultLabel.setObjectName("defaultLabel")

        self.radiobutton_mode_FPS.setGeometry(QtCore.QRect(170, 500, 95, 20))
        self.radiobutton_mode_FPS.setObjectName("FPS")
        self.radiobutton_mode_FPS.clicked.connect(self.update_mode)

        self.fpsLabel.setGeometry(QtCore.QRect(200, 500, 160, 16))
        self.fpsLabel.setObjectName("fpsLabel")


    def get_object(self):
        Tk().withdraw()
        filepath = askopenfilename()
        self.files.append(ss.path_to_cvimage(filepath))
        self.plainText.appendPlainText(filepath)
        self.start_stop.setEnabled(True)

    def set_positionbox(self):
        self.positionLabel.setGeometry(QtCore.QRect(10, 550, 160, 16))
        self.positionLabel.setObjectName("positionLabel")

        self.positionBox.addItem("UpperLeft")
        self.positionBox.addItem("UpperRight")
        self.positionBox.addItem("LowerLeft")
        self.positionBox.addItem("LowerRight")
        self.positionBox.setGeometry(80, 545, 160, 32)
        self.positionBox.activated.connect(self.set_position)

    def set_position(self, index):
        if index == 0:
            self.corner.x = 0
            self.corner.y = 0

        elif index == 1:
            self.corner.x = 1920 - 320
            self.corner.y = 0

        elif index == 2:
            self.corner.x = 0
            self.corner.y = 1080 - 180

        elif index == 3:
            self.corner.x = 1920 - 320
            self.corner.y = 1080 - 180

        self.corner.move_window()


    def update_image_slot(self, np):

        cvImage = cv2.cvtColor(np, cv2.COLOR_BGR2RGB)
        self.lastMatch = cvImage
        ConvertToQtFormat = QImage(cvImage.data, cvImage.shape[1], cvImage.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(640, 360, Qt.KeepAspectRatio)
        Pic = QPixmap.fromImage(Pic)
        self.screen.setPixmap(Pic)

    def black_screen(self):
        self.screen.setPixmap(self.black)

    def startStopButton(self):
        if self.start_stop.text() == "Start":
            self.corner.show()
            self.corner.Worker = Worker(self.threshold.value(), self.mode, self.files)
            self.corner.Worker.start()
            self.corner.Worker.ImageUpdate.connect(self.corner.update_image_slot)
            self.Worker = Worker(self.threshold.value(), self.mode, self.files)
            self.Worker.start()
            self.Worker.ImageUpdate.connect(self.update_image_slot)
            self.Worker.BlackScreen.connect(self.black_screen)
            self.start_stop.setText("Stop")

        elif self.start_stop.text() == "Stop":
            self.corner.Worker.stop()
            self.Worker.stop()
            self.start_stop.setText("Start")
            self.corner.close()

    def update_threshold(self):
        threshold = self.threshold.value()
        self.thresholdLabel.setText(str(threshold / 100))

    def update_mode(self):
        if self.radioButton_mode_Default.isChecked():
            self.mode = 'Default'

        elif self.radiobutton_mode_FPS.isChecked():
            self.mode = 'FPS'

        print(self.mode)


class Worker(QThread):

    ImageUpdate = pyqtSignal(np.ndarray)
    BlackScreen = pyqtSignal()
    UpdateThreshold = pyqtSignal()

    def __init__(self, threshold, mode, files):
        super(Worker, self).__init__()
        self.ThreadActive = True
        self.Threshold = threshold
        self.Mode = mode
        self.Files = files

    def run(self):

        while self.ThreadActive:

            qimage = ObjectDetection(self.Threshold, self.Mode).detect_objects(ss.capture_screen(), self.Files)
            self.ImageUpdate.emit(np.array(qimage))

        self.BlackScreen.emit()

    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
